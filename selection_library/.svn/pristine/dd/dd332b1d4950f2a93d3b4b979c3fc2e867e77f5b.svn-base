/**
 * 
 */
package com.huayue.framework.util;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author lsk0414
 *
 */
public class Page<T> {
	
	private int PageIndex = 1;    //当前页
	
    private int PageCount = 0;    //总页数
    
    private int RecordCount = 0;  //记录总数
    
    private int PageSize = 15;    //每页显示的记录数
    
    @SuppressWarnings("unchecked")
	private List<T> Items = Collections.EMPTY_LIST; //对应的当前页记录
    
    private Map<String, Object> params = new HashMap<String,Object>(); //其他的参数我们把它分装成一个Map对象  
    
    public Page(){}
    
    public Page(int page, int total, int pSize)
    {
        PageIndex = page;
        RecordCount = total;
        PageSize = pSize;

        PageIndex = PageIndex < 1 ? 1 : PageIndex;
        if (( RecordCount > 0) && (PageSize > 0))
        {
            PageCount = (int)Math.ceil((float)RecordCount / (float)PageSize);
        }
        PageIndex = PageIndex > PageCount ? PageCount : PageIndex;
    }

	public void add(T obj)
    {
        Items.add(obj);
    }

    public Object get(int i)
    {
        if (i < Items.size()) return Items.get(i);
        else return null;
    }

    public int getRecordCount()
    {
        return RecordCount;
    }
    
    public void setRecordCount(int recordCount){
    	this.RecordCount = recordCount;
    	if (( RecordCount > 0) && (PageSize > 0))
        {
            PageCount = (int)Math.ceil((float)RecordCount / (float)PageSize);
        }
        PageIndex = PageIndex > PageCount ? PageCount : PageIndex;
    }
    
    public int getPageIndex()
    {
        return PageIndex;
    }
    
    public int size()
    {
        return Items.size();
    }

    public int getPageCount()
    {
        return PageCount;
    }

    public int getPageSize()
    {
        return PageSize;
    }
    
    public void setPageSize(int pageSize){
    	this.PageSize = pageSize;
    }
    
	public List<T> getItems() {
		return Items;
	}

	public void setItems(List<T> items) {
		Items = items;
	}

	public int prevPage()
    {   	   	
        return (PageIndex > 1 ? PageIndex - 1 : 1);   
    }

    public int nextPage()
    {   	
        return (PageIndex >= PageCount ? PageCount : PageIndex + 1);
    }

    protected void finalize() throws Throwable
    {
        Items.clear();
    }

    /**
	 * @return the params
	 */
	public Map<String, Object> getParams() {
		return params;
	}

	/**
	 * @param params the params to set
	 */
	public void setParams(Map<String, Object> params) {
		this.params = params;
	}	

	/**
	 * @param pageIndex the pageIndex to set
	 */
	public void setPageIndex(int pageIndex) {
		PageIndex = pageIndex;
	}

	public String toString()
    {
        return null == Items ? "" : Items.toString();
    }
}
